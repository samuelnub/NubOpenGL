22 June 2016
	opens window successfully, reads window dimensions from global vars for now, like the filthy hog that i am
	mac compatibility supplied by https://gist.github.com/cbmeeks/5587a11e7856baf819b7

23 June 2016
	render class which takes in vertex data, able to bind to vbo to it, link vert attrib pointers, and bind vao, compile and link const char* shaders, then draw it, and the destructor deletes the appropriate vao and vbo
	right now the render class only interprets vert coords, and color is hardcoded within frag shader
	implemented indexing within "bind" func, makes it so that giving index is optional
	project settings, made "working directory" the same dir containing source

24 June 2016
	render class doesnt compile and link shaders for each god damn object anymore
	shader class implemented and utilised in game class
	spent 5 hours trying to figure out why glsl shaders wouldnt apply, then realised that i didnt link the shaders in the shader constructor, nice one idiot
	vertex currently holds coords and colors, render class interprets that and glsl shaders just pass out whats given
	separated drawing vbo and ebo per frame, must be user defined, just for retarded microoptimisation
	render class implements compulsory texture, so vert colours arent really needed, unless it gets used as normals in the future

	went 3d, cant go back, save my soul
	basic 3d, implements mvp matrices within game loop, will probably abstract away
	vert shader multiples m * v * p backwards and spits out those positions
	removed redundant vertex info for colors, since we have textures

	moved model transformations to a per-render object basis
	test out transformations on various Render objects like a little child
	

TODO:
	implement normals in the Vertex struct in globals.h
	implement proper input class instead of being a procrastinating dumbo
	add multitexturing support
	encapsulate mvp transformations to a separate class that my *input class can utilise for controls, *hopefully soon, you lazy fibo
	"player" class, which implements an fps-style control scheme, controls view matrix, and possibly projection